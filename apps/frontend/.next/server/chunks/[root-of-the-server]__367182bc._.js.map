{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///D:/Project/mumii/apps/frontend/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { compare } from \"bcryptjs\";\r\n\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: {\r\n      id: string;\r\n      name?: string | null;\r\n      email?: string | null;\r\n      image?: string | null;\r\n    };\r\n  }\r\n\r\n  interface User {\r\n    id: string;\r\n  }\r\n}\r\n\r\ndeclare module \"next-auth/jwt\" {\r\n  interface JWT {\r\n    id: string;\r\n  }\r\n}\r\n\r\nconst handler = NextAuth({\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        // In production, this would check against a database\r\n        // For now, we'll use mock users\r\n        const mockUsers = [\r\n          {\r\n            id: \"1\",\r\n            email: \"user@mumii.com\",\r\n            password:\r\n              \"$2a$12$8yNvEHOplIkNUQQD.Zy5WOTqJGD9Zd6aW0Y4EyMkE8vEsSpKGl4Uy\", // password123\r\n            name: \"John Doe\",\r\n            image: \"https://api.dicebear.com/7.x/avataaars/svg?seed=john\",\r\n          },\r\n          {\r\n            id: \"2\",\r\n            email: \"foodie@mumii.com\",\r\n            password:\r\n              \"$2a$12$8yNvEHOplIkNUQQD.Zy5WOTqJGD9Zd6aW0Y4EyMkE8vEsSpKGl4Uy\", // password123\r\n            name: \"Jane Smith\",\r\n            image: \"https://api.dicebear.com/7.x/avataaars/svg?seed=jane\",\r\n          },\r\n        ];\r\n\r\n        const user = mockUsers.find((u) => u.email === credentials.email);\r\n\r\n        if (user && (await compare(credentials.password, user.password))) {\r\n          return {\r\n            id: user.id,\r\n            email: user.email,\r\n            name: user.name,\r\n            image: user.image,\r\n          };\r\n        }\r\n\r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  pages: {\r\n    signIn: \"/auth/signin\",\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token && session.user) {\r\n        session.user.id = token.id as string;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAuBA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,qDAAqD;gBACrD,gCAAgC;gBAChC,MAAM,YAAY;oBAChB;wBACE,IAAI;wBACJ,OAAO;wBACP,UACE;wBACF,MAAM;wBACN,OAAO;oBACT;oBACA;wBACE,IAAI;wBACJ,OAAO;wBACP,UACE;wBACF,MAAM;wBACN,OAAO;oBACT;iBACD;gBAED,MAAM,OAAO,UAAU,IAAI,CAAC,CAAC,IAAM,EAAE,KAAK,KAAK,YAAY,KAAK;gBAEhE,IAAI,QAAS,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAAE,YAAY,QAAQ,EAAE,KAAK,QAAQ,GAAI;oBAChE,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;oBACnB;gBACF;gBAEA,OAAO;YACT;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;AACF","debugId":null}}]
}